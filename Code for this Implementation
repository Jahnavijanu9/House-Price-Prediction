import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import matplotlib.pyplot as plt

# Load the datasets
train_data = pd.read_csv('train.csv')
test_data = pd.read_csv('test.csv')

# Checking & Impute missing values in LotFrontage with the median
print("\n Training data  missing values: \n",train_data.isnull().sum())
print("\n\n Test data missing values: \n",test_data.isnull().sum())
train_data['LotFrontage'].fillna(train_data['LotFrontage'].median(), inplace=True)
test_data['LotFrontage'].fillna(test_data['LotFrontage'].median(), inplace=True)

# Impute missing values in SaleType with the mode
test_data['MSZoning'].fillna(test_data['MSZoning'].mode()[0], inplace=True)
test_data['SaleType'].fillna(test_data['SaleType'].mode()[0], inplace=True)

# Selecting relevant features and the target variable
features = ['GrLivArea', 'BedroomAbvGr', 'FullBath']  # Assuming 'GrLivArea' is square footage
target = 'SalePrice'

X = train_data[features]
y = train_data[target]

X_test = test_data[features]

# Split the training data into training and validation sets
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_val_scaled = scaler.transform(X_val)
X_test_scaled = scaler.transform(X_test)

# Initialize and train the model
model = LinearRegression()
model.fit(X_train_scaled, y_train)

# Make predictions on the validation data
y_val_pred = model.predict(X_val_scaled)

# Calculate MAE, RMSE, and R-squared on the validation data
mae = mean_absolute_error(y_val, y_val_pred)
rmse = mean_squared_error(y_val, y_val_pred, squared=False)
r2 = r2_score(y_val, y_val_pred)

print(f'Mean Absolute Error on validation set: {mae}')
print(f'Root Mean Squared Error on validation set: {rmse}')
print(f'R-squared on validation set: {r2}')

# Make predictions on the test data
y_pred = model.predict(X_test_scaled)

# Add the predictions to the test data
test_data['predicted_price'] = y_pred

# Display the test data with predictions
print(test_data[['Id', 'predicted_price']])

# Plotting Residuals
residuals = y_val - y_val_pred
plt.scatter(y_val_pred, residuals)
plt.xlabel('Predicted Prices')
plt.ylabel('Residuals')
plt.title('Residual Analysis')
plt.axhline(y=0, color='r', linestyle='--')
plt.show()

# Plotting Predicted vs Actual
plt.scatter(y_val, y_val_pred)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Predicted vs Actual Prices')
plt.plot([min(y_val), max(y_val)], [min(y_val), max(y_val)], color='red')  # Identity line
plt.show()
